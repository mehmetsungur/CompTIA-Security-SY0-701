Hey everybody. Welcome back to Pluralsight.
I'm your instructor, Christopher Rees.
And in this module we'll be talking
about the types of vulnerabilities.
So let's go ahead and take a look
at what we'll cover in this module.
So we're talking about application type vulnerabilities.
We'll be talking about operating system-based
or OS-based, web-based, hardware, virtualization,
cloud-specific, and then also supply chain,
cryptographic, misconfigurations, mobile devices,
and of course, zero-days.
So as always, I'd like to dig in
and show you what's under the hood a little bit more.
So go ahead and pause this for just a moment.
You can read through this if you need to.
And then when you're ready, let's go ahead and get started.
Okay, first up, let's talk about memory or DLL injection.
So DLL injection or memory injection is a process
of inserting code into a running process.
So four basic steps here. We would attach to that process.
We would allocate memory within the process.
Copy the DLL or the DLL path into the process's memory,
and then determine the appropriate memory addresses.
And then from there, instruct the process
to execute the malicious DLL.
So this could be a manual process.
Again, beyond the scope of this course, what you need
to understand is just the basics behind how it happens
and what, yeah, potential ramifications might be.
But there are tools that can be used
that will automate this process.
Metasploit being one of them.
And Pluralsight has several labs on Metasploit.
So you can look up the labs if you wanna dig in
and actually play with the application
and kind of see how it operates in a sandboxed environment.
But for our purposes here,
let's take a look at Metasploit.
All right, so here is Metasploit sitting
from within one of the Pluralsight labs,
and in the bottom left corner you'll see msf6.
And at the time of this recording,
I'm using Metasploit v6.3.34.
Now that may change over time.
So from there I just clear the screen
so it's a little bit easier to see.
But if I type search type:exploit name:dll
it will show me all of the built-in scripts,
all of the built-in modules that they have
that reference DLL exploits.
So it comes back and shows me a number of exploits
that are available right outta the box.
I don't have to do much at all
to exploit various types of DLLs and applications
and processes within the operating system and so forth.
All right, and you'll see that they're also ranked
by how likely you are to be able to execute those things.
It goes from excellent to good, to normal, to low, right?
So if I wanna understand, let's say I wanna look
at all the ones that are shown as excellent.
I could type search type:exploit name:dll,
and then rank, I would put in as excellent.
And it comes back and it shows me a number of exploits
that have an excellent chance of being executed properly.
So if I wanted to dig in
and see a little bit more info about a specific one,
as an example, I would say info 5,
which from the description you can see
is a Windows Server 2012 SrClient DLL hijack.
So if I type info 5, it comes back
and it shows me the module side effects, some basics
around the options, what's available to me,
and description of what it does.
And again, all of these things can be done fairly
out of the box, not necessarily a high level
of sophistication necessary or required,
but tools like this make it very easy
to implement these types of DLL hijacks
or DLL memory injections.
And again, digging into the nitty gritty, and actually
showing these things in a real world environment,
a little bit beyond the scope of this course,
but I certainly encourage you to dig
into the labs that Pluralsight has,
so you can fire up an environment yourself
and understand how they operate in a sandboxed environment.
Of course, you can also download these on your own,
whether it's a Windows or a Linux machine,
and you can play with it within your own environment.
(laughs) I would not recommend trying to do this
while you're at work, trying to scan your network
or do any type of DLL hijacking
or any of these type of penetration testing tools.
I would not do that on a live environment,
especially at work, which you would call a, (laughs) an RGE
or a resume generating event.
So we don't wanna do that, right?
We don't wanna jeopardize either our network
or of course our own careers.
So take it with a grain of salt.
If you have permission to do so, then by all means,
but typically we don't wanna do that
in a corporate or a business environment.
If we can work it in a lab,
if we can work it in a lab environment, that's much better.