Along those same lines
is something referred to as package monitoring.
So we can do static and also dynamic analysis
but the goal here is dependency scanning
to identify and analyze third-party packages or libraries.
So it can also perform something called security linting
on the codebase
and that basically uses static analysis techniques
to examine source code without actually executing it.
So it analyzes the code to identify patterns
and coding practices that are known to be risky or insecure.
And then we have dynamic code analysis.
So here we're monitoring the behavior
of external packages and libraries
during the actual runtime.
So just like we talked about before,
static code is non-running code,
dynamic code analysis uses running code.
And here we're looking for the interactions
between packages and libraries.
Fuzzing or fuzz testing can also be integrated against APIs
or application programming interfaces or functions.