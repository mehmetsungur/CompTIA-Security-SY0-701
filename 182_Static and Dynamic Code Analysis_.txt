Okay, now, we've talked before
about static code analysis.
I'm gonna cover it here again
simply because we're also gonna be talking
about the counterpart to this in just a moment.
But static code analysis,
also known as source code analysis,
is a method of evaluating
the source code of a software program
without actually executing it.
And that's the key takeaway.
We're not actually running the code.
So the primary goal is to identify vulnerabilities, errors,
something called code smells,
which is basically an indication that things could go wrong,
and in other issues that could lead to security risks
or poor performance.
So as part of code review
or white box testing,
it's also part of the implementation phase
of the Security Development Lifecycle and the CI/CD process.
So what it does is it finds vulnerabilities
in non-running code,
and again, that's the key distinction here, non-running.
So taint analysis, data flow analysis,
we've talked about that before.
But I bring this up
because I wanna talk about the flip side,
and that is dynamic code analysis.
So here, we're basically analyzing code
as it's running or being executed.
So we observe how the code functions.
We observe how it interacts with external systems and data,
so runtime-specific issues or configuration problems
that wouldn't actually appear until things are running.
Now a subset of dynamic code analysis
is something referred to as fuzzing.
So fuzzing is intentionally trying to crash a program
or an application by providing invalid, unexpected,
or random data.
So it's typically used by application designers
and testers internal to that company,
and it finds bugs, defects,
and security holes in applications.
However, it can also be used by hackers.
So they'll use the same fuzzing techniques,
and they can identify Zero Day vulnerabilities
by basically feeding applications or web forms
tons and tons of different random inputs
to see what might break,
in other words, crash applications,
crash websites, and so forth.
So the same tools that can be used for good,
obviously can be used for bad.
So digging into fuzzing itself
is a bit beyond the scope of this course,
but I do mention it just to call your attention
to the fact that the tools exist.
And if you wanna dig into it further,
then I would check out things like Kali Linux,
which is a distribution that has fuzzing tools built in.
It's a security-based Linux distribution.
Or you can go to CERT's website
and have the URL listed here,
and from there you can download their fuzzing toolkit
and dig in a bit more,
learn how it functions,
and start playing with it on your own.