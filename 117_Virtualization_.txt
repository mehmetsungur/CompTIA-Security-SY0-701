Okay, next, let's talk about virtualization.
We talked about it briefly before,
but just understand that virtualized infrastructure.
So we can talk about workstations, it could be servers,
it could be storage, networking.
So it's not just a server or a desktop.
We can virtualize pretty much any piece in that IT stack.
And just for your own information,
in case you're not familiar with virtualization,
there are a few major players in that space.
So we have VMware, we have Microsoft's Hyper-V,
another one called KVM, and then Oracle.
They all have very robust virtualization products.
VMware is the biggest player in that space,
but by no means are they the only player.
And having said that, all of the virtualization technologies
operate in more or less the same fashion,
although there are different management suites,
there are different ways of controlling
and operating and administrating these things,
but the basic concepts are the same.
So what it does is it takes the capabilities
and the personality of a physical device
and it converts it to a virtual representation.
So instead of having a single server,
you can now have multiple servers
existing on top of a single physical server.
And it can perform the same functions
as its physical counterpart.
It lowers infrastructure costs,
but it will raise typically your licensing cost.
Because you have a hypervisor license,
you may have to pay for the number of CPUs
in your host, right?
There are different things that will be tacked on,
but in the grand scheme of things,
it's typically cheaper and it allows you to migrate
and move things a little more easily.
So a virtualization example.
So here we have a traditional server, right?
And you see we have the server,
which is the bare metal piece there.
There's an operating system that's applied on top of that.
And then on top of the operating system,
we then load our applications.
Well, on a virtualized environment,
and in this instance we have VMware,
we have our bare metal server.
We install VMware on top of that,
and now that's our virtualization platform.
Then we can install multiple OSes
and multiple sets of applications.
Each one of the blocks here
is actually a separate virtual server
sitting on top of a physical server.
So in other words, we could have a physical server
that might host 30 or 40 virtual servers,
all act completely identical to a physical counterpart,
and have everything that a physical server would have,
its own IP address, its own operating system,
you could have several that are Windows,
you could have several that are Linux,
it doesn't really matter.
So they function for all intents and purposes,
the same as a physical server.
Again, a VMware example, we have an ESX or an ESXi host.
And then on top of that,
we have four different servers here.
And you can see, we can divvy up the amount of processor,
the amount of RAM, and so forth
that these virtual servers are getting
based upon the needs of that server.
So in this case, we have four different servers.
One has four CPUs, one has one, one has two, and so forth.
And they could have different operating systems.
Again, all acting as if they were true physical servers,
but they've been virtualized
sitting on top of that physical server,
and that physical server has basically a pool of CPU,
a pool of memory, a pool of storage,
and of network or interconnectivity.
So those things are then divvied up to the guests
or the servers, the virtual servers
that sit on the host machine.
So that's otherwise known as a multi-tenant environment
with multiple virtual machines or guests
on one hypervisor or host.
So we have type I,
which is basically the host runs on a bare metal server
and guests run on the host.
So VMware, vSphere, as an example.
Individual guests can be Windows or Linux
or any other flavor of operating system.
And these are more suited to enterprise environments, right?
So management tools for advanced virtualization
management and automation
are built into that operating system.
So there is no other operating system
sitting on top of that bare metal.
The VMware ESX ecosystem is the operating system.
So when we have type II,
that basically has a host that runs on top of an OS,
and guests run inside of the host.
So VMware workstation or Virtual Box,
newer versions of Windows
have virtualization technology built in as well.
So we have a server
that actually is running Windows or Linux,
and then on top of that, we run VMware, right?
So VMs run at a third layer above the hardware.
And this is more suited for a desktop environment
for development testing,
desktop virtualization and so forth.
They're usually slower and less performant,
they have less management functions and automation functions
than type I hypervisors.
And then we have container-based.
So this is operating system virtualization.
Very, very lightweight.
Containers can start up in milliseconds
and they share an OS kernel.
So they typically contain the application and the binaries,
but not the operating system.
You may have heard of Kubernetes and Docker,
which are both containerization platforms
that allow for us to deploy containers very, very quickly.
And you'll see this in a microservices architecture
where you wanna be able to spin up containers
very, very quickly.
And these things lend themselves to like web applications
or things that have very high demand,
or potentially high demand,
like you might run a commercial
during the Super Bowl as an example,
and all of a sudden you go from having 3000 visitors a month
to 20,000 visitors in one day.
So you don't wanna have to pay for 20,000 servers
the entire year
if you only need that for one day, as an example.
So by having things in a containerized environment,
you can very quickly scale up for demand, meet that demand,
and then when the day's over or the week's over,
scale back down again.
So that way you're only using
and only paying for what you need.