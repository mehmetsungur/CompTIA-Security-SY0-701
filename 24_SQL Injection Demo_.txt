Okay, let's take a look
at a SQL injection demo,
and we'll use one of the Pluralsight labs as a demo,
and specifically using the Web Attacks: SQL injection lab.
Again, I just want to give you a quick demo
and an example of a SQL injection.
I would encourage you to check out the lab as well
and go through some additional steps.
There's several challenges within that lab.
I'll just cover one of the first ones
just to kind of give you an intro into a SQL injection.
Okay, so once you enter the lab,
you're sitting here in an Ubuntu desktop
within the Pluralsight lab, as I mentioned.
So, I'll basically open up a Firefox browser,
and then from there, there's a ready-made website
that has some vulnerabilities kind of built in to kind
of illustrate some of the things we're talking about,
right, SQL injection being one of those.
So, if I type in 172.31.24.40,
it will bring up the demo website.
And then once the website loads,
we'll just go ahead
and close the initial welcome screen.
And from there, we can see
that we have an account, we can log into that site,
and then there's a number of vulnerabilities
that we could be looking at. So again, just a quick demo
to illustrate a SQL injection concept.
So, if I hit F12 to bring up my developer toolbar,
and I have it docked to the right here.
So, if I go ahead and click on login, again,
I will use test at test.com with the password of test.
And then I hit login.
So, if I look on the network tab here,
and I click on login, it shows me some information
about the login request
that was sent to that website.
So, if I click on the response,
it'll say invalid email or password.
Well, if I add a single quote to the end of that,
it will basically give an invalid SQL command.
So, let's see what happens there.
So, hit login again.
Now I click down on this login,
and we see some additional information here.
So, I can see that it's giving me some information
that I can now use to see what's going on.
So, if I look all the way down to the bottom here,
I can see it's showing me the actual SQL query
that's being passed to the web server.
So, select star from users where email equals test
to test and password equals this hashed password,
and delete it is that null.
So, if I go ahead and just take
that out a little bit further and say,
okay, I passed an invalid command.
And now I know it's giving me
back some information that it really shouldn't.
If this is constructed properly,
it wouldn't give back this information,
or at least not pass it back to the user,
it would have some additional error handling in place.
So, by adding an additional command here,
let's go ahead and add or one equals one,
because now what we're doing is passing
some additional information into that SQL query,
where this will always be true, right?
One equals one. All right, so let's go ahead
and see what happens here.
Again, I click on login, I go back to the bottom now.
And you can see where I'm basically saying select star
or select all from users where email equals test
to test.com, or one equals one,
and the password equals password.
So, I'm getting a little further down the line here.
So, what I can also then add at this point
is an additional parameter.
And by adding these two dashes,
I'm basically commenting out anything
that follows that.
So, by basically adding in these two dashes, right,
which will be passing the SQL query
would have the two dashes here.
So, I'm gonna basically say,
where email equals test to test.com,
or one equals one.
And then, and then by having the two dashes here,
I'm actually commenting out the rest of that.
So, when I pass that now,
it will actually be a true statement, right?
So, let's go ahead and take a look at what this does.
And we can see here now
that I'm actually logged in now.
And you can see under the account,
I'm logged in as the admin,
because the website
did not have proper error handling,
I can do a SQL injection,
put in a statement that is true,
and then comment out to the rest of that SQL query.
So, I didn't even have to provide the password.
Basically, I just gave an email that didn't exist,
because I said, either use this email,
or one equals one,
and one equals one will always be true.
The rest of that statement was commented out,
and then it was given access to that website.
So just a very, very high level,
very quick primer into a SQL injection.
And then it should also raise some flags
with you on the other side as a developer
or as a security professional,
to make sure we sanitize our websites properly.
And then we make sure that any login forms
do not accept improper SQL syntax.
And if so, the errors are hidden from the user,
so they don't have information to go on
and try to start digging
into how to bypass our login credentials.