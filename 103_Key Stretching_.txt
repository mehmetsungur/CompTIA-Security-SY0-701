So next, let's talk about the concept
of key stretching.
And a few things I wanna make you aware of,
first is PBKDF2, which stands
for Password-Based Key Derivation Function 2.
So whether you wanna remember the acronym
or the actual phrase, that's up to you.
If you wanna sound super smart, right,
and impress your friends at parties, just use PBKDF2.
No one's gonna know what you're talking about,
but be prepared, if they actually ask you what's that mean,
you have to actually know what it stands for, right?
Nothing worse than actually being called on something,
and say, "Oh, I don't know."
So keep that one in your back of your pocket.
And then understand that it's part of RSA, PKCS #5 v2.0,
if you wanna look that up.
And it's basically a pseudorandom function applied
to a password or a passphrase.
So what we're trying to do is strengthen the key, right?
So we may have an initial key that's not very strong.
Remember we talked about key length?
The longer the key, the stronger it is.
Well, if we're starting out with a key
that's not necessarily very strong,
we can basically stretch that key and make it more secure.
We're adding pseudorandom data
to the password or the passphrase.
So that could be a hash, a cipher, an HMAC.
And basically, as I mentioned, we're adding salt
to that password, that pseudorandom data,
for that additional randomness,
that additional strength to the key.
And that process is repeated over and over many times.
And it creates what's called a derived key.
So that can be used as a cryptographic key
for subsequent sessions.
So each time we use it, each time it's done,
it's a different key.
So it makes it much more difficult to crack,
to brute force guards against rainbow table attacks
and so forth.
So here's an example of a stretched key.
All right, not really, but you get the idea.
But what I do wanna make you aware
of is something called Bcrypt.
So that was actually created back in 1999,
and is based on the Blowfish algorithm.
So it's a key derivation function used for passwords.
And as I mentioned, it adds an additional salt function
to guard against rainbow attacks.
Just like when we add salt to food to make it better, right,
minus the high blood pressure. (chuckles)
We're adding salt here to make it stronger.
It's taking a key that's not inherently strong by itself
or not as strong as it could be,
and we're adding additional randomness
to that key to make it even stronger,
and again, to guard against things like brute forcing
or rainbow table attacks.