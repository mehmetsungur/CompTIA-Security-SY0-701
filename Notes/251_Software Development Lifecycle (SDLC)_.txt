All right, let's switch gears for a bit
and talk about SDLC.
So this is the software development lifecycle.
So in a nutshell, it's a systematic process for planning,
creating, testing, deploying,
and also maintaining software applications.
So basically start to finish womb to tomb,
whatever you wanna call it.
So it provides a structured approach to software development
that ensures the final product meets quality standards,
is delivered on time, and of course, stays within budget.
So as you can see here, there's a number of steps
and each one flows down kind of in a waterfall fashion.
We'll talk about waterfall here
and also agile in just a moment.
So as you might notice,
this looks like a waterfall approach.
So SDLC could follow a waterfall method,
or it can also follow an agile methodology,
which we'll talk about in just a moment.
But just to go through these real quick so you understand
what each of these steps do.
So requirements gathering and analysis.
We basically wanna understand
the project's goals and requirements.
This revolves around collecting
and documenting user requirements,
analyzing their feasibility,
and basically creating a detailed project scope document.
For system design, we're creating a high-level design
of the system's architecture and components.
And this revolves around the structure, databases,
user interfaces, and other technical specifications.
The implementation or coding phase
basically translating the design into actual code.
So we're writing the code,
developing the software application,
again, based upon design specifications.
When it comes to testing,
we wanna make sure the software functions correctly
and meet specified requirements.
And this could be various types of testing,
such as unit testing, integration testing,
and then user acceptance testing.
And then we have a deployment or release phase.
So as the name implies, we're deploying software
to a production environment for end users.
And this could include data migration, configuration
of the software itself and installation.
And last but not least, we have maintenance and support.
We need to continuously monitor, update,
and improve the software to address issues,
and of course, enhance functionality.
So this includes ongoing support, bug fixes, updates,
and as I mentioned, implementing new features as needed.
So as I mentioned, the SDLC can also follow
an agile software development lifecycle,
which is iterative and incremental.
So it allows for flexibility for changing requirements
and is usually run in Scrum or a Kanban fashion.
It encourages collaboration
and rapid deployment between development groups,
testing groups, and so forth.
It's also focused on continuous improvement.
So if you go through this process,
you'll see they have a backlog, which basically is a list
of everything that needs to get done.
And then we have sprint planning.
So we pull things from the backlog,
typically in an order of priority
and enter them into a sprint.
A sprint is usually a one or two-week cycle.
And during that process, all the things we wanna accomplish
within that one or two-week period is then laid out.
We scope out the difficulty and then who's going to do what.
Then it goes into development
or the actual sprint where people will work
on the various topics,
which are sometimes referred to as epics or stories.
During that sprint, we start to test
whether it's smoke test at the development level,
unit testing or integration testing.
So as we near the end of that sprint, we will review
and demo what has been accomplished.
We have a retrospective, which looks back at the sprint
and says, "Okay, what works, what didn't?
What do we need to adjust or tune for next time?"
And then from there, we have an incremental delivery.
So whatever was worked on, the features that were created
are then merged and pushed through the various stages,
testing, QA, staging, and out to production.
And that can be done every sprint.
It could be done once a month, once a quarter, again,
depending upon your cadence.
Hopefully it's faster than once a quarter.
Some very mature organizations push out changes
multiple times per day.
So after delivery, we then have backlog refinement.
We go back and say, okay, let's groom that backlog again.
Pull out things that aren't necessary, close things
that have been completed,
perhaps change your order of priority.
And then we repeat and start all over again
for the next sprint.
Again, a collaborative effort
where you'll typically have one or two PMs
or Scrum masters that will lead the efforts,
make sure things are getting accomplished,
run the daily standups so everyone gets a chance to speak
and say what they've accomplished,
what are the potential blockers
that may prevent them from moving forward and so forth.