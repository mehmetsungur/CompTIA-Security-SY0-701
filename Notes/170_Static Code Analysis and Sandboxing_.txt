Next, let's talk about application security.
So a few things I want to review.
Static code analysis, so also known as source code analysis.
It's basically part of code review
or what's referred to as white box testing.
So it's a method of evaluating the source code
of a software program without actually executing it.
So it's typically in the implementation phase
of the security development lifecycle or SDL
or the CI/CD process, continuous integration,
continuous delivery, or continuous deployment.
So the primary goal is to identify vulnerabilities, errors,
code smells, which basically means code
that's not really an error or a bug,
but could lead to issues down the road.
Or other issues that could lead
to security risks or poor performance.
So in a nutshell, it allows us
to find vulnerabilities in non-running code.
And two ways to do that are taint analysis
and data flow analysis.
So these things check the valid syntax
to identify basic errors,
examines how data moves throughout an application,
and can catch issues like data leaks or variable misuse.
And also evaluates the order in which different parts
of code are executed
to identify logical errors or inefficiencies.
Now, some static code analysis tools, just a few examples.
Again, not an endorsement of one tool over another.
I just wanna basically bring your
attention to some of these things.
So we have Checkmarx, which is basically used
to scan uncompiled code for various languages.
Basically good for static analysis.
SonarQube, very popular for measuring code quality
and it provides a wide array of metrics
and integrates with various CI/CD tools.
Fortify is another example, provides static code analysis.
ESLint, which is basically used for JavaScript
or TypeScript, very customizable.
Also helps enforce coding standards.
And then Pylint is another, again, specific to Python.
It checks for errors and enforces a coding standard.
Again, not an endorsement
of one particular program over another.
I just wanna give you a few examples
so you can go check into these deeper if you care to
and see if there's a place for them in your environment.
Next we have the concept of sandboxing.
So sandboxing can isolate code or upgrades,
and also testing from the production environment.
So we can do things like test code changes.
We can also roll back changes very quickly.
We can do regression testing against various applications.
So in a sandbox environment as an example,
we can even run malware
and watch what it's trying to do without worrying about it
infecting or impacting the network at large.
That same concept of sandboxing
can also be used on mobile devices.
We talked about that a moment ago,
where we can have things running
in a virtualized environment or a container,
and we can put guardrails around that so that
that code cannot escape out to our main device.
So when we're sandboxing applications,
what we're doing is isolating
that application from other user data,
from other resources and so forth.
It can prevent malware and viruses
from interacting with the application.
And then each application has its own environment
on the host, so that way one application
does not taint the other,
and it also prevents an application crash from affecting
other applications running on that host.
So if something goes south, all the rest
of the applications still function as normal.
So that brings us to the end of the module.
We talked about a lot of good information here
from securing baselines to hardening targets,
wireless devices, mobile devices and so forth,
along with how RADIUS functions
in an enterprise environment.
So hopefully you found this information useful,
and please stick with me because up next,
we'll be talking about the security implications
of proper hardware, software, and data asset management.
See you in the next module.