Something else to keep in mind
is change management.
So the ultimate purpose of change management
is to reduce risk.
And at the end of the day,
that's pretty much everyone's goal,
or at least one of their top goals,
is to reduce risk, de-risk the environment,
make it as secure as possible,
while providing services to customers,
end users, and so forth.
So we have things like administrative
and technical controls.
So when these things are updated or changed,
we have to make sure that that's communicated out,
and we coordinate those changes throughout the environment.
So this would also entail
ensuring proper procedures are followed.
So established to change windows or maintenance windows.
And also documented methods of procedure.
So by having all these things in place,
and perhaps even a change management board
or some type of oversight committee
that can sit there and review changes
daily or weekly or perhaps monthly, or biweekly,
again, it's going to depend upon your organization.
But there should be some type of a committee
that looks at all the changes that are going to take place,
so that way there's an understanding
of downstream impacts, potentially.
Or change collisions. Perhaps two different groups
are doing changes at the same time, on the same night,
with systems that rely on each other
or perhaps even the same system.
If your company's big enough,
there's a chance that these groups don't necessarily talk
and are unaware of the changes.
So by having a change committee in place
and reviewing these things,
you're able to avoid stepping on each other's toes,
so to speak.
So some other things to include
when we're submitting change management requests,
and again, there should be some type of an approval chain
to document and understand, make sure we're in compliance.
So things like, has the change actually been tested?
Are we're sure it's going to actually work?
Is there a rollback or a backup procedure documented?
So if things don't go right
or taking longer than expected,
how do we get back to a known good state?
Also, has it been peer-reviewed?
This is always a good one
to make sure that there's a second set of eyes,
or maybe even a third set of eyes,
to make sure nothing's been missed,
configuration errors, and so forth.
And then also, are any affected users notified?