Next, we have something
referred to as a collision attack.
So a collision attack is basically one that tries
to find two hash inputs that have the same output.
So we talked before about hashing
and how we could basically hash a word or a file
or an entire dictionary.
And if one letter changes, well the entire hash changes.
Well, it is possible,
although it's a relatively small possibility,
but it is possible for two separate inputs
to produce the same output,
and that's referred to as a collision.
So this could be used to bypass security
and enable a malicious file to appear actually
as legitimate if the hash values are the same.
So here we have a legitimate file
and we run a hash against that file to get an output,
and then we also have a malicious file
that when we run the hash against that,
it gives us the actual same output.
So when the hash values match, it appears legitimate.
So from the user's perspective, if he receives that file
and he runs a hash against it and they match,
then he's gonna assume that that's legitimate.
So from a hacker's perspective, if they can take a file
and then add malicious code
or do something to that file
such that the hash functions are the same,
they could send that malicious file to an end user,
run a hash against that file
to verify that it is in fact legitimate.
The hashes match, they think, "Oh, okay, great.
Everything's fine."
They click on it, and then malware or whatever else
is installed on their system.
So not very easy to do.
Again, hash collisions are pretty rare, but it does exist,
and we need to understand how to mitigate against that.
And typically by using strong encryption mechanisms,
strong hashing functions.
SHA-256, as an example, are collision resistant algorithms.
So next is a birthday attack,
and this kind of goes in line
with what we just talked about for collisions.
So we don't necessarily have to know
every single possible combination.
And this is where the birthday attack comes into play.
It's basically referred to as a birthday paradox.
So in a room full of people, what's the probability
that two will share the same birthday?
Well, the answer may surprise you.
So even though there are 365 days in a year,
in a room full of people, 23 people,
there's a 50.7% chance
that they will share the same birthday.
30 people, there's a 70% chance,
70 people, it's 99.9% chance
that two of them will share the same birthday.
And then 253 people there is a 100% chance.
So you can see here, there's a pretty big jump between 70
and 253, yet we're only getting basically
1/10 of 1% better odds.
So from a hash perspective
or a collision perspective, we really need to only shoot
for that 70 people out of the room full.
We're not getting much more by focusing our efforts
to try to go for 100%.
So in knowing that, we don't have to try
to hash every single possibility under the sun,
we can shrink our focus
and still have a very high probability of success
with the right tooling, the right computational power,
and of course time.