Let's go ahead and shift gears a bit
and talk about embedded systems.
So an embedded system is a microprocessor based
computer hardware system with software that is designed
to perform a very specific or a dedicated function.
So they act either as an independent system
or as part of a larger system,
but at their core is an integrated circuit
designed to carry out computations
for realtime operations or realtime operating systems.
So you might ask yourself, what's the difference
between an embedded system and just a general computer?
It sounds very similar.
Well, an embedded system is designed
for a very specific task, very low latency,
and it does one thing very, very well.
Whereas a general computer can handle many tasks
and it does lots of things well,
embedded systems are designed
to do one thing very, very specifically,
but do it very fast, low latency,
and in most cases, real time.
Embedded systems have lots of different applications,
and they span the gamut of what they're used for.
So many use cases from household appliances
to medical devices, industrial machines,
networking equipment, and so forth.
But there are some real security concerns
when it comes to embedded systems.
For instance, we have limited resources.
So due to their often constrained computational resources,
traditional security measures
might be challenging to implement.
They just don't have enough power,
they don't have enough RAM, CPU, and so forth
to do processor intensive things
like encryption and so forth.
They also have a long lifecycle.
So embedded devices might be in use for many years,
sometimes even decades,
which can pose challenges in updating and also patching.
And then we have a concern around physical security.
Many embedded systems are deployed
in physically accessible locations,
which of course can make them vulnerable to tampering.
And if they're tampered with and that's actually connected
to an internal system or to a network,
well then as you might guess,
that's an easy access potentially to that network.
And like we just talked about, connectivity in general,
as more and more embedded systems become interconnected,
in other words like the internet of things,
they face increased exposure to network based attacks.
And when they have limited resources,
again, limited security defenses,
encryption, if it's there at all, is potentially weak,
well, you can fill in the blanks
as to how that could pose a problem.
Then we have supply chain issues.
So the components and the software used in embedded systems
might come from diverse sources,
introducing potential vulnerabilities
if not thoroughly vetted.
So that's something that we've discussed in another module.
But vetting supply chain or even third party vendors,
making sure that their security practices
is in alignment with our own, is crucial.
And then we have legacy systems, so older embedded systems
that were not designed with current security threats in mind
and become particularly vulnerable.
And that kind of goes hand in hand
with number one, limited resources,
and number two, a long lifecycle.
Some of these things might stick around
for years or decades.
Well, if they're out there in the wild,
the physical security is limited or non-existent,
they have connectivity to a network,
whether it's wired or wireless,
there's a lot of things that could go wrong here,
or at least introduce vulnerabilities
into your network or into your environment.
So when we're talking about embedded systems
and IOT devices, keep these things top of mind.
Security should be paramount when you're vetting
and auditing your environments.