Next, let's talk about documentation.
So documentation is comprised of lots of different things
but a couple key things to remember.
So diagrams, when we have diagrams for our applications,
and whether it's actual like user flow
or information flow diagrams
or technical diagrams of how things are connected,
how things are built,
we need to make sure that those as-built diagrams
and reference architectures and so forth,
they can, and they typically will, evolve over time.
So as we add systems or we deprecate things,
or we add new features or functions,
our documentation should be updated
as close to real time as possible.
And the same thing goes
for updating policies and procedures.
So lessons learned as we go through things,
and we have issues, we learn from outages
from different, you know, critical incidents,
all of those lessons learned should be included
to update our policies.
Our policies used to say X, Y, Z,
but we learned there was a big gap
between two of those things.
Well, now we're doing things completely differently.
We're adding some new procedures
or some new processes to cover that.
Well, that should be included
and updated in the policies
and the procedures, right, our SOPs.
So the lessons learned
and the changes in policies should be reflected
in that documentation,
and as I mentioned, kept as real time as possible.
And then lastly is the concept of version control.
So especially like in a DevOps environment
or a coding environment, when we're making changes,
all of those changes should be kept in a database, right?
They're gonna be tracked,
and then that way we can roll back changes if necessary
if we need to audit and see, okay,
what changes were made when,
and we can also fork things out
and put them into different branches
so that different developers can be working
on different things at the same time, right?
So version control, in a nutshell,
tracks code changes typically in a database.
So it enables a quick rollback
and allows us to go back
to any point in time very, very quickly.
And these things are typically annotated
by a revision number, v1.1, v1.2, v1.3,
et cetera, et cetera.
So minor changes are typically point releases
or dot releases.
And then when we do major changes,
we might increment the actual number.
So instead of it being 1.1 to 1.2 to 1.3,
if it's a major change,
we would jump from 1.3 to 2.0, right?
It kind of delineates major versus minor changes.
And then as far as version control systems are concerned,
Git is an example of a version control repository.
So GitHub, GitLab, Bitbucket,
there's a number of ones out there.
They're all based on Git as the underlying code repository
or the version control.
And then like I said, GitHub, GitLab, Bitbucket,
all these different ones that are out there
are kind of web-based versions.
Some are on-prem, but they're basically web-based versions
that allow for developers to to check in, check out code,
but they use Git for the underlying infrastructure.
Okay, so in this module,
we talked about the change management process
and the importance of keeping things standardized,
procedures, documentation, all of that good stuff, right,
all the sub-components we need to notify,
key stakeholders, owners,
and the overall importance of documentation.
So I hope that module was informative for you,
but up next we'll be talking about a very important module,
a very deep module called
"Using Appropriate Cryptographic Solutions."
So I'll see you in the next module.