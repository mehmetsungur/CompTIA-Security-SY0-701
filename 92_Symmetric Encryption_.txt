Then when we're talking
about encryption algorithms,
we have the concept of symmetric versus asymmetric.
So symmetric encryption uses the same key to both encrypt
and decrypt a piece of data, right?
We talked about a PKI having a public key private key.
While we're talking about symmetric encryption,
we're using the same key to both encrypt and decrypt.
So as I mentioned, same key used for both operations.
So as an example, we have here plain text, "Hello students!"
We're gonna use that encryption algorithm and a secret key,
but that secret key exists on both sides of the equation.
So we're gonna encrypt that data with the secret key,
turns it into cipher text.
It gets transmitted on the receiving side,
they use that same secret key
and the decryption algorithm
to decrypt it back into plain text, right?
So, "Hello Students" appears on both sides
as it goes across the network on the receiving side
and then we have the message.
So, symmetric encryption, as I said,
same key used for both encryption and decryption.
It's often referred to as a shared key
or a secret key encryption.
As you might imagine, key management is the biggest concern,
both parties must know the secret key.
It's difficult to prove identity since multiple people
could know the key.
And if that gets compromised or passed around,
then anyone can decrypt that data.
Symmetric encryption though is faster than asymmetric.
Sometimes we'll use both to secure communications,
and as I mentioned before, the strength is affected
by the length of the key.
And that goes for any encryption algorithm.
Typically speaking, the longer the key,
the more robust and the stronger that encryption is.
And that basically boils down to the number
of iterations through the algorithm.
So the longer the key, the longer it's gonna take to try
to decrypt or crack or brute force
ultimately providing a stronger algorithm.